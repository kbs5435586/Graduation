volatile

변수를 다룰때 실행속도를 더 빠르게 하기위해서 컴파일러가 변수를 
레지스터에 저장해서 모든 연산이 거기서 이뤄짐
근데 volatile를 선언해주면 컴파일러가 최적화를 하지 않고 
무조건 메모리에다가 직접 쓰고 참조할때도 메모리에서 참조하지
레지스터에 저장해놓고 그 값을 참조하는 짓은 안함

원래는 레지스터 선언이 있었는데 씨언어 표준이 바뀌면서 사라짐
근데 volatile은 있는 이유가 컴파일러가 최적화 처리를 해선 안되는
코드들이 있음 : 벤치마킹 코드, IO에 관련있는 코드
(파일 전송, 레지스터 입출력, 메모리 맵드 IO (메모리 맵 입출력) )

메모리 맵드 IO는 메모리 주소를 가지고 IO를 하는데 컴파일러가 최적화 한다고
메모리 변형을 해서 레지스터에만 들어가고 메모리에 안들어가 
오작동을 일으키는걸 방지



메모리 맵 입출력(영어: Memory-mapped I/O, MMIO)는 마이크로프로세서(CPU)가 
입출력 장치를 액세스할 때, 입출력과 메모리의 주소 공간을 분리하지 않고 하나의 
메모리 공간에 취급하여 배치하는 방식이다